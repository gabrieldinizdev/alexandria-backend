// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Department {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  category  Category[]
}

model Category {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.ObjectId
  product      Product[]
}

model Product {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  sku         String
  title       String
  description String
  price       Float
  active      Boolean
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  category    Category           @relation(fields: [categoryId], references: [id])
  categoryId  String             @db.ObjectId
  stocks      ProductsOnStocks[]
}

model Stock {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?
  products  ProductsOnStocks[]
}

model ProductsOnStocks {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String   @db.ObjectId
  stock      Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stockId    String   @db.ObjectId
  quantity   Int
  assignedAt DateTime @default(now())

  @@unique([productId, stockId])
}
